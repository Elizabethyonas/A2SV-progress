class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        graph = defaultdict(list)
        for a,b in edges:
            graph[a].append(b)
            graph[b].append(a)
        visited = set()
        self.ans = False
        def dfs(vertex,visited):
            if vertex == destination:
                self.ans = True
                return
            visited.add(vertex)
            for neighbor in graph[vertex]:
                if neighbor not in visited:
                    dfs(neighbor,visited)
        dfs(source,visited)
        return self.ans
